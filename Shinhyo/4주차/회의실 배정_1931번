/* 나의 풀이 - 신효민
    풀이 방법 : 그리디(탐욕)알고리즘 사용
    1. 종료시간을 기준으로 객체 정렬 수행
     (특히 정렬시 , 종료시간이 같으면서 시작시간이 다른 객체가 있다면 시작시간이 빠른 것을 선행 원소로 정렬 )
    2. 정렬 후 회의 시간이 겹치지 않으면서 종료시간이 빠른 것부터 count 해서 정답 출력 - 자세한 사항은 코드 참고
 */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

class Main{


    public static void main(String []args) throws IOException
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        int N=Integer.parseInt(br.readLine());
        StringTokenizer st;
        ArrayList<Meeting> list=new ArrayList<>(); // 회의 리스트
        for(int i=0;i<N;i++)
        {
            st=new StringTokenizer(br.readLine()," ");
            int start_time=Integer.parseInt(st.nextToken()); // 회의 시작하는 시간
            int end_time=Integer.parseInt(st.nextToken()); // 회의 끝나는 시간
            list.add(new Meeting(start_time,end_time)); // 회의 리스트에 추가
        }
        Collections.sort(list); // 정렬 수행 - Comparable 사용 -> 객체 정렬을 위해서
        int count=0;
        int prev_end_time=0; // 이전 회의 끝나는 시간
        for(int i=0;i<list.size();i++)
        {
            if(prev_end_time<=list.get(i).getStart_time()) // 회의 시간이 겹치지 않을때
            {
                prev_end_time=list.get(i).getEnd_time(); // 이전 회의 끝나는 시간 업데이트
                count++; // 결과값에 +1 해준다.
            }
        }
        System.out.println(count); // 결과값 출력

    }
}
// 회의 class
class Meeting implements Comparable<Meeting>{ // 객체 정렬을 위해 Comparable 인터페이스 implements 해줌.
    private int start_time; // 회의 시작 시간
    private int end_time; // 회의 끝나는 시간

    @Override //객체 정렬을 위한 것
    public int compareTo(Meeting o) {
        if(this.end_time==o.end_time) // 회의 종료 시간이 똑같다면
        {
            return this.start_time-o.start_time; // 시작 시간이 빠른 객체를 앞(선행 원소)으로 정렬 , 음수일때는 위치 교환 x , 양수일때는 위치교환한다.
        }
        return this.end_time-o.end_time; // 음수일때는 위치 교환 x , 양수일때는 위치교환한다.
    }

    // 생성자
    Meeting(int start_time,int end_time)
    {
        this.start_time=start_time;
        this.end_time=end_time;
    }

    // get 함수
    public int getStart_time()
    {
        return start_time;
    }
    public int getEnd_time()
    {
        return  end_time;
    }



}
