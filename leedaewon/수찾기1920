/*
이 문제는 그냥 보고 쉬운줄 알고 이중for문을 이용하였다가 시간초과가 나서 고민한 문제이다.
해답은 퀵소트정렬과 이진 탐색트리를 이용하는 것 이였는데, 이 코드의 경우 퀵소트가 코드로 구현되어있다. 그러나 c++에는 qsort라는 함수가 있기 때문에
굳이 코드로 구현 할 필요는 없지만(구현하면 오히려 시간초과가 난다.) 공부하고자 하는 차원에서 퀵소트또한 찾아보며 구현해보았다.
구현하며 퀵소트정렬과 이진탐색트리를 알게 되었고, 간단한 문제치고는 매우 의미있는 문제였다고 생각한다. 
9*/

#include<stdio.h>

int ans[1000];
int a[1000];
//퀵정렬 구현 
void swap(int *a,int *b){                       //배열 안에서 지정된 위치끼리 자리를 바꾼다. 
	int temp= *a;
	*a=*b;
	*b=temp;
}


void quicksort(int start,int end){ 		        	//퀵소트 구현  
	if(start>=end){					                  		//start값이 end값보다 크다면 함수를 종료한다. 
		return;
	}
	int key=start, i=start+1, j=end;	 
	while(i<=j){							                    //i값이 j값보다 크다면 (i는 피벗값 다음 배열을 의미, j는 오른쪽 끝 배열을 의미)반복문 종료
		while(i<=end&& a[i]<=a[key]){              //배열[i]값이 피벗값보다 큰것을 찾을때 까지 i를 1씩 더한다.	(왼쪽부터 탐색)	
			i++;
		}
		while(j>start && a[j]>=a[key]){            //배열[j]값이 피벗값보다 작은 것을 찾을 때 까지 j를 1씩 뺀다. (오른쪽 부터 탐색)
			j--;
		}
		if(i>j){                                  //만약 i값이 j값보다 크다면(왼쪽부터 찾던 값이 오른쪽부터 찾던 값 보다 더 오른쪽에 있다면)피벗값과 오른쪽부터 찾던값(작은값)의 배열에서 자리를 바꾼다.
			swap(&a[key],&a[j]);
		}
		else{                                    //위의 경우가 아니라면 찾은 배열[i]값과 배열[j]값의 배열에서 위치를 바꾼다.
			swap(&a[i],&a[j]);
		}

	}
	quicksort(start,j-1);                      //이를 재귀적으로 반복
	quicksort(j+1,end);
}

//이진탐색트리 
int binary_search_tree(int key,int end){
	int start=0, pivot;                        //변수pivot은 시작값(0)과 끝값을 2로 나눈것(이진탐색트리에서 필요한 값)
	while(1){                                  //조건을 만족할때 까지 반복
		pivot=(start+end)/2;
		if(a[start]==key){                      //만약 배열의 첫부분이 key값과 같다면 1을 반환
			return 1;
		}
		if(a[end]==key){                        //만약 배열의 끝부분이 key값과 같다면 1을 반환
			return 1;
		}
		if(a[pivot]==key){                      //만약 배열[pivot]이 key값과 같다면 1을 반환
			return 1;
		}
		if(a[pivot]<key){                      //만약 배열[pivot]이 key값보다 작다면 start값을 반이상으로 설정
			start=pivot+1;
		}
		else{                                //그게 아니라면 end값을 반 이하로 설정
			end=pivot-1;
		}
		if(start>=end){                        //만약 start값이 end값과 같거나 더 크다면 0을 반환(같거나 start값이 더 커질정도로 반복했는데도 없다면 없는것)
			return 0;
		}
		
	}
	
}

int main(){

	int n,m;
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&a[i]);
	}
	scanf("%d",&m);
	for(int i=0;i<m;i++){
		scanf("%d",&ans[i]);
	}
	quicksort(0,n-1);
	for(int i=0;i<m;i++){
		printf("%d ",binary_search_tree(ans[i],m-1));
	}
}
