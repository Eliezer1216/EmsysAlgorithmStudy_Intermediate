/*
중요한점은 작은수 구별이 아닌 방문했는지의 여부와 이 문제에서는 연결선의 방향이 없다는 것 이였다
dfs는 재귀함수를 이용하여 풀어었음

bfs는 q안에 변수를 넣고 팝 하는 식으로 구현하였다
bfs는 기본적으로 숫자의 크기를 따라가면 구현하기 쉽다
그래서 숫자를 1씩 늘려가며 그 아래에 있는 숫자들을 출력하게 하였다.
*/
#include <stdio.h>
//DFS BFS 
int graph[1001][1001];
int dfsvisit[1001];
int bfsvisit[1001];
int q[1001];

void dfs(int cur,int n){
	int i;
	dfsvisit[cur]=1;
	for(i=1;i<=n;i++){
		if(graph[cur][i]==1 && dfsvisit[i]!=1){
			printf("%d ",i);
			dfs(i,n);
		}
	}
}

void bfs(int cur, int n){
	int front=0, rear=0, pop, i;
	
	q[0]=cur;
	rear++;
	bfsvisit[cur]=1;
	
	while(front<rear){
		pop=q[front];
		front++;
		
		for(i=1;i<=n;i++){
			if(graph[pop][i]==1 && bfsvisit[i]!=1){
				printf("%d ",i);
				q[rear]=i;
				rear++;
				bfsvisit[i]=1;
			}
		} 
	}
	
}

int main() {
	int n,m,v;
	int i;
	int x,y;
	scanf("%d %d %d",&n,&m,&v);
	
	for(i=0;i<m;i++){
		scanf("%d %d",&x,&y);
		graph[x][y]=1;
		graph[y][x]=1;
	}
	
	printf("%d ",v);
	dfs(v,n);
	printf("\n");
	printf("%d ",v);
	bfs(v,n);
	
	return 0;
}
